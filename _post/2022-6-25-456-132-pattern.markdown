---
layout: post
title: 456-132-pattern
date: 2022-06-25T14:23:55.767Z
---

```
456. 132 PatternMediumGiven an array&nbsp;of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i &lt; j &lt; k and nums[i] &lt; nums[k] &lt; nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

&nbsp;
Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.


Example 2:

Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].


Example 3:

Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].


&nbsp;
Constraints:


	n == nums.length
	1 &lt;= n &lt;= 2 * 105
	-109 &lt;= nums[i] &lt;= 109

 
```

##Code
 ```
  class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        int minVal = INT_MAX;
        stack<pair<int,int>> st;
        int n = nums.size();
        
        for(int i = 0;i<n;i++){
            while(!st.empty() and nums[i] >= st.top().first){
                st.pop();
            }
            
            if(!st.empty() and nums[i] > st.top().second){
                return true;
            }
            
            st.push({nums[i],minVal});
            minVal = min(nums[i],minVal);
        }
        
        
        return false;
    }
}; 
```