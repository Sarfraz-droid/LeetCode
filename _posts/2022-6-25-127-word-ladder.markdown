---
layout: post
title: 127-word-ladder
date: 2022-06-25T14:52:08.024Z
---

```
127. Word LadderHardA transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk such that:


	Every adjacent pair of words differs by a single letter.
	Every si for 1 &lt;= i &lt;= k is in wordList. Note that beginWord does not need to be in wordList.
	sk == endWord


Given two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.

&nbsp;
Example 1:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log","cog"]
Output: 5
Explanation: One shortest transformation sequence is "hit" -&gt; "hot" -&gt; "dot" -&gt; "dog" -&gt; cog", which is 5 words long.


Example 2:

Input: beginWord = "hit", endWord = "cog", wordList = ["hot","dot","dog","lot","log"]
Output: 0
Explanation: The endWord "cog" is not in wordList, therefore there is no valid transformation sequence.


&nbsp;
Constraints:


	1 &lt;= beginWord.length &lt;= 10
	endWord.length == beginWord.length
	1 &lt;= wordList.length &lt;= 5000
	wordList[i].length == beginWord.length
	beginWord, endWord, and wordList[i] consist of lowercase English letters.
	beginWord != endWord
	All the words in wordList are unique.

 
```

##Code
 ```
  class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        
        unordered_set<string> mp;
        bool isPresent = false;
        
        for(auto word: wordList){
            if(word == endWord)
                isPresent = true;
            
            mp.insert(word);
        }
        
        if(!isPresent)
            return 0;
        
        queue<string> q;
        q.push(beginWord);
        int depth = 0;
        
        while(!q.empty()){
            depth+=1;
            int k =  q.size();
            
            while(k--){
                string curr = q.front();
                q.pop();
                
                for(int i = 0;i<curr.size();i++){
                    string temp = curr;
                    
                    for(char c = 'a'; c<='z';c++ ){
                        temp[i] = c;
                        
                        if(curr.compare(temp) == 0)
                            continue;
                        if(temp == endWord)
                            return depth+1;
                        else if(mp.find(temp) != mp.end()){
                            q.push(temp);
                            mp.erase(temp);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
        return 0;
        
    }
}; 
```
##NOTES.md
 ---
layout: post
title: 127-word-ladder
date: 2022-06-25T14:52:08.024Z
---

```
â€‹ 
```
