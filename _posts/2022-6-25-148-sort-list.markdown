---
layout: post
title: 148-sort-list
date: 2022-06-25T14:20:30.307Z
---

```
148. Sort ListMediumGiven the head of a linked list, return the list after sorting it in ascending order.

&nbsp;
Example 1:

Input: head = [4,2,1,3]
Output: [1,2,3,4]


Example 2:

Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]


Example 3:

Input: head = []
Output: []


&nbsp;
Constraints:


	The number of nodes in the list is in the range [0, 5 * 104].
	-105 &lt;= Node.val &lt;= 105


&nbsp;
Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?
 
```

##Code
 ```
  /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        multiset<int> st;
        while(head!=NULL){
            st.insert(head->val);
            head = head->next;
        }
        
        ListNode* front = new ListNode();
        ListNode* f = front;
        for(auto x: st){
            ListNode* temp = new ListNode(x);
            
            front->next = temp;
            front = front->next;
        }
        
        return f->next;
    }
}; 
```
##NOTES.md
 ---
layout: post
title: 148-sort-list
date: 2022-06-25T14:20:30.307Z
---

```
â€‹ 
```
